type: edu
files:
- name: src/sorting/Main.kt
  visible: true
  text: |
    package sorting

    fun main() {
        // write your code here
    }
  learner_created: false
- name: src/sorting/application/interactor/SortLinesImpl.kt
  visible: true
  text: |
    package sorting.application.interactor

    import sorting.domain.gateway.SortGateway
    import sorting.domain.usecase.SortLines

    class SortLinesImpl(
        private val sortGateway: SortGateway
    ) : SortLines {
        override fun execute(request: SortLines.Request): SortLines.Response {
            val result = runCatching {
                sortGateway.sortLines(request.input, request.sortBy)
            }
            return SortLines.Response(result)
        }
    }
  learner_created: true
- name: src/sorting/console/io/PrinterStdout.kt
  visible: true
  text: |
    package sorting.console.io

    class PrinterStdout : Printer {
        override fun println(str: String) {
            println(str)
        }
    }
  learner_created: true
- name: src/sorting/domain/usecase/SortLong.kt
  visible: true
  text: |
    package sorting.domain.usecase

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem

    interface SortLong {
        fun execute(request: Request): Response
        data class Request(
            val input: List<String>,
            val sortBy: SortBy,
        )

        data class Response(val result: Result<List<StatItem<Long>>>)
    }
  learner_created: true
- name: src/sorting/domain/entity/StatItem.kt
  visible: true
  text: |
    package sorting.domain.entity

    class StatItem<T>(
        val value: T,
        val count: Int,
    )
  learner_created: true
- name: src/sorting/domain/gateway/SortGateway.kt
  visible: true
  text: |
    package sorting.domain.gateway

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem

    interface SortGateway {
        fun sortLongs(input: List<String>, sortBy: SortBy): List<StatItem<Long>>
        fun sortWords(input: List<String>, sortBy: SortBy): List<StatItem<String>>
        fun sortLines(input: List<String>, sortBy: SortBy): List<StatItem<String>>
    }
  learner_created: true
- name: src/sorting/domain/usecase/SortLines.kt
  visible: true
  text: |
    package sorting.domain.usecase

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem

    interface SortLines {
        fun execute(request: Request): Response
        data class Request(
            val input: List<String>,
            val sortBy: SortBy,
        )

        data class Response(val result: Result<List<StatItem<String>>>)
    }
  learner_created: true
- name: src/sorting/domain/entity/SortBy.kt
  visible: true
  text: |
    package sorting.domain.entity

    enum class SortBy {
        Natural,
        ByCount
    }
  learner_created: true
- name: src/sorting/application/gateway/SortGatewayImpl.kt
  visible: true
  text: |
    package sorting.application.gateway

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem
    import sorting.domain.gateway.SortGateway

    class SortGatewayImpl : SortGateway {
        override fun sortLongs(input: List<String>, sortBy: SortBy): List<StatItem<Long>> {
            val regex = "-?\\d+".toRegex()

            val numbers = input.flatMap { line ->
                line.trim().split("\\s+".toRegex())
                    .filter {
                        if (regex.matches(it)) {
                            true
                        } else {
                            println("\"$it\" is not a valid parameter. It will be skipped.")
                            false
                        }
                    }
                    .map(String::toLong)
            }

            return sortItems(numbers, sortBy)
        }

        override fun sortWords(input: List<String>, sortBy: SortBy): List<StatItem<String>> {
            val words = input
                .map { it.trim() }
                .flatMap {
                    it.split("\\s+".toRegex())
                }
            return sortItems(words, sortBy)
        }

        override fun sortLines(input: List<String>, sortBy: SortBy): List<StatItem<String>> {
            return sortItems(input, sortBy)
        }

        private fun <T : Comparable<T>> sortItems(items: List<T>, sortBy: SortBy): List<StatItem<T>> {
            val index = items.groupingBy { it }
                .fold(0) { acc, _ -> acc + 1 }
                .map {
                    StatItem(
                        value = it.key,
                        count = it.value
                    )
                }

            if (sortBy == SortBy.ByCount) {
                return index.sortedBy { it.count }
            }
            return index.sortedBy { it.value }
        }
    }
  learner_created: true
- name: src/sorting/console/io/Printer.kt
  visible: true
  text: |
    package sorting.console.io

    interface Printer {
        fun println(str: String)
    }
  learner_created: true
- name: src/sorting/application/interactor/SortLongImpl.kt
  visible: true
  text: |
    package sorting.application.interactor

    import sorting.domain.gateway.SortGateway
    import sorting.domain.usecase.SortLong

    class SortLongImpl(
        private val sortGateway: SortGateway
    ) : SortLong {
        override fun execute(request: SortLong.Request): SortLong.Response {
            val result = runCatching {
                sortGateway.sortLongs(request.input, request.sortBy)
            }
            return SortLong.Response(result)
        }
    }
  learner_created: true
- name: src/sorting/console/service/SortService.kt
  visible: true
  text: |
    package sorting.console.service

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem

    interface SortService {
        fun sortLongs(lines: List<String>, sortBy: SortBy): Result<List<StatItem<Long>>>
        fun sortWords(lines: List<String>, sortBy: SortBy): Result<List<StatItem<String>>>
        fun sortLines(lines: List<String>, sortBy: SortBy): Result<List<StatItem<String>>>
    }
  learner_created: true
- name: src/sorting/console/io/PrinterFile.kt
  visible: true
  text: |
    package sorting.console.io

    import java.io.File

    class PrinterFile(
        private val file: File
    ) : Printer {

        override fun println(str: String) {
            file.appendText(str)
        }
    }
  learner_created: true
- name: src/sorting/console/Application.kt
  visible: true
  text: |
    package sorting.console

    import sorting.application.gateway.SortGatewayImpl
    import sorting.application.interactor.SortLinesImpl
    import sorting.application.interactor.SortLongImpl
    import sorting.application.interactor.SortWordsImpl
    import sorting.console.service.SortService
    import sorting.console.service.SortServiceImpl
    import sorting.domain.gateway.SortGateway
    import sorting.domain.usecase.SortLines
    import sorting.domain.usecase.SortLong
    import sorting.domain.usecase.SortWords

    object Application {
        private val sortGateway: SortGateway = SortGatewayImpl()

        private val useCaseSortLong: SortLong = SortLongImpl(sortGateway)
        private val useCaseSortWords: SortWords = SortWordsImpl(sortGateway)
        private val useCaseSortLines: SortLines = SortLinesImpl(sortGateway)

        val sortService: SortService = SortServiceImpl(
            useCaseSortLong = useCaseSortLong,
            useCaseSortWords = useCaseSortWords,
            useCaseSortLines = useCaseSortLines,
        )
    }
  learner_created: true
- name: src/sorting/console/ConsoleRunner.kt
  visible: true
  text: |
    package sorting.console

    import sorting.console.io.Printer
    import sorting.console.io.PrinterFile
    import sorting.console.io.PrinterStdout
    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem
    import java.io.File
    import java.util.Scanner

    class ConsoleRunner(
        private val args: Array<String>
    ) : Runnable {
        private val sortService = Application.sortService
        private lateinit var dataType: DataType
        private lateinit var sortBy: SortBy
        private lateinit var printer: Printer
        private lateinit var inputFile: File

        private fun parseInputFile(args: Array<String>) {
            val index = args.indexOf("-inputFile")
            if (index != -1) {
                if (index + 1 >= args.size) {
                    throw Exception("No input file provided!")
                }
                inputFile = File(args[index + 1])
            }
        }

        private fun parseOutputFile(args: Array<String>) {
            val index = args.indexOf("-outputFile")
            printer = if (index != -1) {
                if (index + 1 >= args.size) {
                    throw Exception("No output file provided!")
                }
                PrinterFile(File(args[index + 1]))
            } else {
                PrinterStdout()
            }
        }

        private fun parseSortingType(args: Array<String>) {
            val index = args.indexOf("-sortingType")
            sortBy = if (index != -1) {
                if (index + 1 >= args.size) {
                    throw Exception("No sorting type defined!")
                }
                when (args[index + 1]) {
                    "byCount" -> SortBy.ByCount
                    else -> SortBy.Natural
                }
            } else {
                SortBy.Natural
            }
        }

        private fun parseDataType(args: Array<String>) {
            val index = args.indexOf("-dataType")
            dataType = if (index != -1) {
                if (index + 1 >= args.size) {
                    throw Exception("No data type defined!")
                }
                when (args[index + 1]) {
                    DataType.Lines.arg -> DataType.Lines
                    DataType.Long.arg -> DataType.Long
                    else -> DataType.Words
                }
            } else {
                DataType.Words
            }
        }

        private fun parseUnknownOptions(args: Array<String>) {
            args
                .filter { it.indexOf("-") != -1 }
                .filter { it != "-dataType" && it != "-sortingType" }
                .forEach {
                    println("\"$it\" is not a valid parameter. It will be skipped.")
                }
        }

        override fun run() {
            try {
                parseSortingType(args)
                parseDataType(args)
                parseUnknownOptions(args)
                parseInputFile(args)
                parseOutputFile(args)
            } catch (e: Exception) {
                println(e.message)
                return
            }

            val input = if(this::inputFile.isInitialized) {
                this.inputFile.readLines()
            }
            else {
                val s = Scanner(System.`in`)
                val tmp = mutableListOf<String>()
                while (s.hasNext()) {
                    tmp.add(s.nextLine())
                }
                tmp
            }

            when (dataType) {
                DataType.Long -> this.runSortLongs(input)
                DataType.Lines -> this.runSortLines(input)
                DataType.Words -> this.runSortWords(input)
            }
        }

        private fun runSortLongs(lines: List<String>) {
            val result = sortService.sortLongs(lines, sortBy)
            if (sortBy == SortBy.ByCount)
                result.fold(
                    { printSortedByCountResult("number", it) },
                    { println(it.message) }
                )
            else {
                result.fold(
                    { printSortedByNaturalResult("number", " ", it) },
                    { println(it.message) }
                )
            }
        }

        private fun runSortWords(lines: List<String>) {
            val result = sortService.sortWords(lines, sortBy)
            if (sortBy == SortBy.ByCount)
                result.fold(
                    { printSortedByCountResult("word", it) },
                    { println(it.message) }
                )
            else {
                result.fold(
                    { printSortedByNaturalResult("word", " ", it) },
                    { println(it.message) }
                )
            }
        }

        private fun runSortLines(lines: List<String>) {
            val result = sortService.sortLines(lines, sortBy)
            if (sortBy == SortBy.ByCount)
                result.fold(
                    { printSortedByCountResult("line", it) },
                    { println(it.message) }
                )
            else {
                result.fold(
                    { printSortedByNaturalResult("line", "\n", it) },
                    { println(it.message) }
                )
            }
        }

        private fun <T : Comparable<T>> printSortedByCountResult(
            title: String,
            list: List<StatItem<T>> = emptyList()
        ) {
            val total = list.sumOf { it.count }

            val invertedIndex = list.groupBy {
                it.count
            }.map { entry ->
                entry.key to entry.value.map { it.value }.sortedBy { it }
            }.toMap()

            println("Total ${title}s: $total.")

            invertedIndex.keys.sortedBy { it }
                .forEach { count ->
                    invertedIndex[count]!!.forEach {
                        println("$it: $count time(s), ${count * 100 / total}%")
                    }
                }
        }

        private fun <T> printSortedByNaturalResult(
            title: String,
            separator: String = " ",
            list: List<StatItem<T>> = emptyList()
        ) {
            val total = list.sumOf { it.count }
            val items = list.flatMap { statItem ->
                List(statItem.count) { statItem.value }
            }
            println("Total ${title}s: $total.")
            println("Sorted data: ${items.joinToString(separator)}")
        }
    }
  learner_created: true
- name: src/sorting/domain/usecase/SortWords.kt
  visible: true
  text: |
    package sorting.domain.usecase

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem

    interface SortWords {
        fun execute(request: Request): Response
        data class Request(
            val input: List<String>,
            val sortBy: SortBy,
        )

        data class Response(val result: Result<List<StatItem<String>>>)
    }
  learner_created: true
- name: src/sorting/console/service/SortServiceImpl.kt
  visible: true
  text: |
    package sorting.console.service

    import sorting.domain.entity.SortBy
    import sorting.domain.entity.StatItem
    import sorting.domain.usecase.SortLines
    import sorting.domain.usecase.SortLong
    import sorting.domain.usecase.SortWords

    class SortServiceImpl(
        private val useCaseSortLong: SortLong,
        private val useCaseSortWords: SortWords,
        private val useCaseSortLines: SortLines,

    ) : SortService {

        override fun sortLongs(lines: List<String>, sortBy: SortBy): Result<List<StatItem<Long>>> {
            val request = SortLong.Request(lines, sortBy)
            return useCaseSortLong.execute(request).result
        }

        override fun sortWords(lines: List<String>, sortBy: SortBy): Result<List<StatItem<String>>> {
            val request = SortWords.Request(lines, sortBy)
            return useCaseSortWords.execute(request).result
        }

        override fun sortLines(lines: List<String>, sortBy: SortBy): Result<List<StatItem<String>>> {
            val request = SortLines.Request(lines, sortBy)
            return useCaseSortLines.execute(request).result
        }
    }
  learner_created: true
- name: src/sorting/application/interactor/SortWordsImpl.kt
  visible: true
  text: |
    package sorting.application.interactor

    import sorting.domain.gateway.SortGateway
    import sorting.domain.usecase.SortWords

    class SortWordsImpl(
        private val sortGateway: SortGateway
    ) : SortWords {
        override fun execute(request: SortWords.Request): SortWords.Response {
            val result = runCatching {
                sortGateway.sortWords(request.input, request.sortBy)
            }
            return SortWords.Response(result)
        }
    }
  learner_created: true
- name: src/sorting/console/DataType.kt
  visible: true
  text: |
    package sorting.console

    enum class DataType(val arg: String) {
        Long("long"),
        Lines("line"),
        Words("word"),
    }
  learner_created: true
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
        input: String,
        revealTest: Boolean,
        file: String,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(input, revealTest, args.toList()))
            .addArguments(*args)
            .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long", "-sortingType", "natural"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "long"
            )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long", "-abc"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line", "-cde"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-dataType", "line", "-sortingType"
            )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "input.txt",
                "-sortingType", "byCount", "-inputFile", "input.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "data.dat",
                "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                false,
                "input.txt",
                "-sortingType", "natural", "-inputFile", "input.txt"
            ),
            fileTestCase(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                false,
                "data.dat",
                "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
            )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
        consoleInput: String,
        revealTest: Boolean,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
            .setInput(consoleInput)
            .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
        actualTokens: List<TokenType>,
        sortedTokensParser: (String) -> List<TokenType>,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't parse your output: expected 2 lines.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Sorted tokens are incorrect.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
        actualTokens: List<TokenType>,
        tokenParser: (String) -> TokenType,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                        false,
                        "Token ($token) is incorrect. Expected: $actualToken.\n" +
                            revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: out.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/106/stages/579/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 06 Nov 2021 15:38:59 UTC
record: -1
