type: edu
files:
- name: src/sorting/Main.kt
  visible: true
  text: |
    package sorting

    fun main() {
        // write your code here
    }
  learner_created: false
- name: src/sorting/console/dto/StatWordsDto.kt
  visible: true
  text: |
    package sorting.console.dto

    import sorting.domain.entity.StatWords

    class StatWordsDto(
        val totalCount: Int,
        val longestWord: String,
        val longestWordCount: Int,
        val longestWordPercent: Int,
    )

    fun StatWords.toStatWordsDto() =
        StatWordsDto(
            totalCount = totalCount,
            longestWord = longestWord,
            longestWordCount = longestWordCount,
            longestWordPercent = if (totalCount > 0) longestWordCount * 100 / totalCount else 0
        )
  learner_created: true
- name: src/sorting/console/StatType.kt
  visible: true
  text: |
    package sorting.console

    enum class StatType(val arg: String) {
        Long("long"),
        Lines("line"),
        Words("word"),
    }
  learner_created: true
- name: src/sorting/console/service/SortService.kt
  visible: true
  text: |
    package sorting.console.service

    interface SortService {
        fun sortIntegers(lines: List<String>): Result<List<Int>>
    }
  learner_created: true
- name: src/sorting/console/Application.kt
  visible: true
  text: |
    package sorting.console

    import sorting.application.gateway.StatLinesGatewayImpl
    import sorting.application.gateway.StatLongGatewayImpl
    import sorting.application.gateway.StatWordsGatewayImpl
    import sorting.application.interactor.BuildStatLinesImpl
    import sorting.application.interactor.BuildStatWordsImpl
    import sorting.application.interactor.SortIntegersImpl
    import sorting.console.service.SortService
    import sorting.console.service.SortServiceImpl
    import sorting.console.service.StatService
    import sorting.console.service.StatServiceImpl
    import sorting.domain.entity.StatLines
    import sorting.domain.entity.StatLong
    import sorting.domain.entity.StatWords
    import sorting.domain.gateway.SortIntegersGateway
    import sorting.application.gateway.SortIntegersGatewayImpl
    import sorting.domain.gateway.StatGateway
    import sorting.domain.usecase.BuildStatLines
    import sorting.domain.usecase.BuildStatLong
    import sorting.domain.usecase.BuildStatLongImpl
    import sorting.domain.usecase.BuildStatWords
    import sorting.domain.usecase.SortIntegers

    object Application {
        private val statLongGateway: StatGateway<StatLong> = StatLongGatewayImpl()
        private val statLinesGateway: StatGateway<StatLines> = StatLinesGatewayImpl()
        private val statWordsGateway: StatGateway<StatWords> = StatWordsGatewayImpl()
        private val sortIntegersGateway: SortIntegersGateway = SortIntegersGatewayImpl()

        private val useCaseBuildStatLong: BuildStatLong = BuildStatLongImpl(
            statGateway = statLongGateway
        )
        private val useCaseBuildStatLines: BuildStatLines = BuildStatLinesImpl(
            statGateway = statLinesGateway
        )
        private val useCaseBuildStatWords: BuildStatWords = BuildStatWordsImpl(
            statGateway = statWordsGateway
        )

        private val useCaseSortIntegers: SortIntegers = SortIntegersImpl(
            gateway = sortIntegersGateway
        )

        val statService: StatService = StatServiceImpl(
            useCaseBuildStatLong = useCaseBuildStatLong,
            useCaseBuildStatLines = useCaseBuildStatLines,
            useCaseBuildStatWords = useCaseBuildStatWords
        )

        val sortService: SortService = SortServiceImpl(
            useCaseSortIntegers = useCaseSortIntegers
        )
    }
  learner_created: true
- name: src/sorting/console/service/SortServiceImpl.kt
  visible: true
  text: |
    package sorting.console.service

    import sorting.domain.usecase.SortIntegers

    class SortServiceImpl(
        private val useCaseSortIntegers: SortIntegers
    ) : SortService {
        override fun sortIntegers(lines: List<String>): Result<List<Int>> {
            val request = SortIntegers.Request(lines)
            return useCaseSortIntegers.execute(request).result
        }
    }
  learner_created: true
- name: src/sorting/console/dto/StatLongDto.kt
  visible: true
  text: |
    package sorting.console.dto

    import sorting.domain.entity.StatLong

    data class StatLongDto(
        val totalCount: Int,
        val maxLong: Long,
        val maxCount: Int,
        val maxPercent: Int,
    )

    fun StatLong.toStatLongDto() =
        StatLongDto(
            totalCount = totalCount,
            maxLong = maxLong,
            maxCount = maxCount,
            maxPercent = if (totalCount > 0) maxCount * 100 / totalCount else 0
        )
  learner_created: true
- name: src/sorting/console/dto/StatLinesDto.kt
  visible: true
  text: |
    package sorting.console.dto

    import sorting.domain.entity.StatLines

    class StatLinesDto(
        val totalCount: Int,
        val longestLine: String,
        val longestLineCount: Int,
        val longestLinePercent: Int,
    )

    fun StatLines.toStatLinesDto() =
        StatLinesDto(
            totalCount = totalCount,
            longestLine = longestLine,
            longestLineCount = longestLineCount,
            longestLinePercent = if (totalCount > 0) longestLineCount * 100 / totalCount else 0
        )
  learner_created: true
- name: src/sorting/console/ConsoleRunner.kt
  visible: true
  text: |
    package sorting.console

    import java.util.Scanner

    class ConsoleRunner(args: Array<String>) : Runnable {
        private val statService = Application.statService
        private val sortService = Application.sortService
        private val statType: StatType
        private val sortingMode: Boolean

        init {
            this.sortingMode = args.indexOf("-sortIntegers") != -1
            val argDataTypeIndex = args.indexOf("-dataType")
            this.statType = if (argDataTypeIndex != -1 && argDataTypeIndex + 1 < args.size) {
                when (args[argDataTypeIndex + 1]) {
                    StatType.Lines.arg -> StatType.Lines
                    StatType.Long.arg -> StatType.Long
                    else -> StatType.Words
                }
            } else {
                StatType.Words
            }
        }

        override fun run() {

            val s = Scanner(System.`in`)
            val input = mutableListOf<String>()
            while (s.hasNext()) {
                input.add(s.nextLine())
            }

            if (sortingMode) {
                this.runSortIntegers(input)
            } else {
                runStat(input)
            }
        }

        fun runSortIntegers(input: List<String>) {
            sortService.sortIntegers(input).fold(
                {
                    println("Total numbers: ${it.size}.")
                    println("Sorted data: ${it.joinToString(" ")}")
                },
                {
                    println("Error: ${it.message}")
                }
            )
        }

        fun runStat(input: List<String>) {
            when (statType) {
                StatType.Long -> {
                    statService.buildStatLong(input).fold(
                        { stat ->
                            println("Total numbers: ${stat.totalCount}.")
                            println("The greatest number: ${stat.maxLong} (${stat.maxCount} time(s), ${stat.maxPercent}%).")
                        },
                        {
                            println("Error: ${it.message}")
                        }
                    )
                }
                StatType.Lines -> {
                    statService.buildStatLines(input).fold(
                        { stat ->
                            println("Total lines: ${stat.totalCount}.")
                            println("The longest line:")
                            println("${stat.longestLine}")
                            println("(${stat.longestLineCount} time(s), ${stat.longestLinePercent}%).")
                        },
                        {
                            println("Error: ${it.message}")
                        }
                    )
                }
                StatType.Words -> {
                    statService.buildStatWords(input).fold(
                        { stat ->
                            println("Total words: ${stat.totalCount}.")
                            println("The longest word: ${stat.longestWord} (${stat.longestWordCount} time(s), ${stat.longestWordPercent}%).")
                        },
                        {
                            println("Error: ${it.message}")
                        }
                    )
                }
            }
        }
    }
  learner_created: true
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long", "-sortingType", "natural"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "long"
            )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
        consoleInput: String,
        revealTest: Boolean,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
            .setInput(consoleInput)
            .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
        actualTokens: List<TokenType>,
        sortedTokensParser: (String) -> List<TokenType>,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't parse your output: expected 2 lines.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Sorted tokens are incorrect.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
        actualTokens: List<TokenType>,
        tokenParser: (String) -> TokenType,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                        false,
                        "Token ($token) is incorrect. Expected: $actualToken.\n" +
                            revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/domain/entity/StatItem.kt
  visible: true
  learner_created: true
- name: src/sorting/domain/usecase/SortLong.kt
  visible: true
  learner_created: true
- name: src/sorting/domain/entity/SortBy.kt
  visible: true
  learner_created: true
- name: src/sorting/domain/gateway/SortGateway.kt
  visible: true
  learner_created: true
- name: src/sorting/domain/usecase/SortWords.kt
  visible: true
  learner_created: true
- name: src/sorting/domain/usecase/SortLines.kt
  visible: true
  learner_created: true
- name: src/sorting/application/interactor/SortLinesImpl.kt
  visible: true
  learner_created: true
- name: src/sorting/application/interactor/SortLongImpl.kt
  visible: true
  learner_created: true
- name: src/sorting/application/interactor/SortWordsImpl.kt
  visible: true
  learner_created: true
- name: src/sorting/application/gateway/SortGatewayImpl.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/106/stages/577/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 06 Nov 2021 11:43:06 UTC
record: 4
